activity_column <- "HCPCS.Line.Procedure.Billed.Code"
activity_column_at <- c("Claim.Administrator.Claim.Number", "HCPCS.Line.Procedure.Billed.Code",
"Service.Line.From.Date")
}
else if (digit_count == "DRG"){
activity_column <- "DRG"
activity_column_at <- c("Claim.Administrator.Claim.Number", "DRG",
"Service.Line.From.Date")
}
else {
HEADER_join_DETAIL <- HEADER_join_DETAIL %>%
dplyr::mutate(ICD_10_substring = substr(First.ICD.9.CM.Diagnosis.Code, 1, as.numeric(digit_count)))
activity_column <- "ICD_10_substring"
activity_column_at <- c("Claim.Administrator.Claim.Number", "ICD_10_substring",
"Service.Line.From.Date")
}
# print("before before something I")
# print(HEADER_join_DETAIL$`First.ICD.9.CM.Diagnosis.Code`)
# print("before before something II")
# Kamil commented below code, revert if not work
data_grouped <- HEADER_join_DETAIL %>%
dplyr::group_by(Claim.Administrator.Claim.Number, !!sym(activity_column),
Service.Line.From.Date) %>%
dplyr::summarize(dummy = 1) %>%
show_query()
print(head(data_grouped))
print('printing activity column at data grouped')
# print("before something I")
#
# print("before something II")
event_log_tbl <- data_grouped %>%
dplyr::select("Claim.Administrator.Claim.Number", {{activity_column}}, "Service.Line.From.Date") %>%
dplyr::mutate(lifecycle_id = "start", Billing.Provider.FEIN = "unknown")
event_log_tbl <- tbl_df(event_log_tbl) %>%
dplyr::arrange(Service.Line.From.Date) %>%
dplyr::mutate(activity_instance_id = row_number())
# print("before something I")
# print(event_log_tbl)
# print("before something II")
#this line could be commented out because Service.Line.From.Date is technically not a date but an integer representing a week number
event_log_tbl <- event_log_tbl %>%
dplyr::mutate(Service.Line.From.Date = as.integer(Service.Line.From.Date)) %>%
dplyr::mutate(Service.Date = as_date(Service.Line.From.Date)) %>%
dplyr::rename(case_id = "Claim.Administrator.Claim.Number", activity_id = activity_column,
timestamp = "Service.Date", resource_id = "Billing.Provider.FEIN")
# print("something 1")
# print(event_log_tbl)
# print("something II")
event_log_object <- event_log_tbl %>%
eventlog(case_id = "case_id", activity_id = "activity_id",
activity_instance_id = "activity_instance_id", lifecycle_id = "lifecycle_id",
timestamp = "timestamp", resource_id = "resource_id")
# event_log_object %>% View()
# print("something III")
event_log_object
}
create_diagnosis_summary_rows <- function(HEADER_join_DETAIL, event_log_object, input, con, code_substring_to_model){
summary_table <- NULL
for (diagnosis in code_substring_to_model){
new_row <- create_diagnosis_summary_row (HEADER_join_DETAIL, event_log_object, input, diagnosis, input$end_ICD_codes, con)
new_row$start_diagnosis <- diagnosis
summary_table <- rbind(summary_table, new_row)
}
summary_table
}
create_diagnosis_summary_row <- function(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, con){
cumulative_table <- full_join(
get_summary(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, TRUE, "avg_per_claim", con) %>% rename("avg_pd_per_claim_with_shift" = 1) %>% dplyr::mutate(join_column = "123"),
get_summary(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, TRUE, "avg_per_bill", con) %>% rename("avg_pd_per_bill_with_shift" = 1) %>% dplyr::mutate(join_column = "123"),
by = "join_column"
)
cumulative_table <- full_join(
cumulative_table,
get_summary(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, FALSE, "avg_per_claim", con) %>% rename("avg_pd_per_claim_without_shift" = 1) %>% dplyr::mutate(join_column = "123"),
by = "join_column"
)
cumulative_table <- full_join(
cumulative_table,
get_summary(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, FALSE, "avg_per_bill", con) %>% rename("avg_pd_per_bill_without_shift" = 1) %>% dplyr::mutate(join_column = "123"),
by = "join_column"
) %>% select(-(join_column))
}
get_summary <- function(HEADER_join_DETAIL, event_log_object, input, diagnosis, end_ICD_codes, Jump, SummaryType, con){
has_diagnosis_jump <- select(get_diagnosis_jumps(event_log_object, input, diagnosis, end_ICD_codes) %>% filter(diagnosis_jump == Jump), case_id)
if (SummaryType == "total_per_claim"){
inner_join(select(has_diagnosis_jump, case_id) %>%
rename(Claim.Administrator.Claim.Number = case_id),
HEADER_join_DETAIL, by = "Claim.Administrator.Claim.Number", copy = TRUE) %>%
group_by(Claim.Administrator.Claim.Number) %>%
dplyr::mutate(Total.Amount.Paid.Per.Line = as.numeric(Total.Amount.Paid.Per.Line)) %>%
summarize(total_paid = sum(Total.Amount.Paid.Per.Line))
}
else if (SummaryType == "avg_per_claim"){
inner_join(select(has_diagnosis_jump, case_id) %>%
rename(Claim.Administrator.Claim.Number = case_id),
HEADER_join_DETAIL, by = "Claim.Administrator.Claim.Number", copy = TRUE) %>%
group_by(Claim.Administrator.Claim.Number) %>%
dplyr::mutate(Total.Amount.Paid.Per.Line = as.numeric(Total.Amount.Paid.Per.Line)) %>%
summarize(total_paid = sum(Total.Amount.Paid.Per.Line)) %>%
summarize(avg_paid_per_claim = mean(total_paid))
}
else if (SummaryType == "avg_per_bill"){
inner_join(select(has_diagnosis_jump, case_id) %>%
rename(Claim.Administrator.Claim.Number = case_id),
HEADER_join_DETAIL, by = "Claim.Administrator.Claim.Number", copy = TRUE) %>%
group_by(Bill.ID) %>%
dplyr::mutate(Total.Amount.Paid.Per.Line = as.numeric(Total.Amount.Paid.Per.Line)) %>%
summarize(total_paid = sum(Total.Amount.Paid.Per.Line)) %>%
summarize(avg_paid_per_bill = mean(total_paid))
}
}
get_diagnosis_jumps <- function (event_log_object, input, diagnosis, end_ICD_codes){
filter_event_log_object(event_log_object, input, diagnosis, end_ICD_codes) %>%
group_by(case_id) %>%
dplyr::mutate(had_other = any(activity_id != diagnosis)) %>%
arrange(case_id) %>%
summarize(diagnosis_jump = first(had_other))
}
filter_event_log_object <- function(event_log_object, input, diagnosis, end_ICD_codes){
if (input$end_ICD_codes == "ANY"){
event_log_object %>% filter_endpoints(start_activities = diagnosis)
}
else {
event_log_object %>% filter_endpoints(start_activities = diagnosis, end_activities = diagnosis)
}
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(treemap)
td_remove_context()
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
uid = 'MK255125', pws = askpass(),
logmech = 'LDAP', dtype = 'native')
library(treemap)
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
td_remove_context()
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
uid = 'MK255125', pws = askpass(),
logmech = 'LDAP', dtype = 'native')
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
uid = 'MK255125', pwd = askpass(),
logmech = 'LDAP', dtype = 'native')
library(askpass)
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
uid = 'MK255125', pwd = askpass(),
logmech = 'LDAP', dtype = 'native')
library(treemap)
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
td_remove_context()
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
uid = 'MK255125', pwd = askpass(),
logmech = 'LDAP', dtype = 'native')
mycon <- td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
mycon <- td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
td_remove_context()
mycon <- td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
library(askpass)
library(dbplyr)
library(tdplyr)
library(teradatasql)
library(tdplyr)
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
con <- DBI::dbConnect(tdplyr::NativeDriver(),
host = 'tdprd.td.teradata.com', uid = 'mk255125', pwd = askpass(), dType = "native")
library(DBI)
con <- DBI::dbConnect(tdplyr::NativeDriver(),
host = 'tdprd.td.teradata.com', uid = 'mk255125', pwd = askpass(), dType = "native")
con <- DBI::dbConnect(tdplyr::NativeDriver(),
host = 'tdprd.td.teradata.com', uid = 'mk255125', pwd = askpass(), dType = "native")
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
library(teradatasql)
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
runApp()
td_remove_context()
library(treemap)
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
library(DBI)
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
install.packages("odbc")
library(odbc)
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
td_remove_context()
mycon <- tdplyr::td_create_context(host = "tdprd.td.teradata.com",
uid = "MK255125", pwd = askpass(),
logmech = "LDAP", dtype = "native")
runApp()
td_remove_context()
library(treemap)
treemap <- read.csv("data_treemap.csv")
head(treemap)
p <- treemap(treemap, index=c("Diagnosis","Procedure"), vSize = "total_paid", type = "index",
palette = "Set2", bg.labels=c("white"),
align.labels=list( c("center", "center"), c("right", "bottom")))
p <- treemap(treemap, index=c("diagnosis_prefix", "HCPCS.Line.Procedure.Billed.Code"),
vSize = "total_paid", type = "index",
palette = "Set2", bg.labels=c("white"),
align.labels=list( c("center", "center"), c("right", "bottom")))
p <- treemap(treemap, index=c("diagnosis_prefix", "HCPCS.Line.Procedure.Billed.Code"),
vSize = "total_paid", type = "index",
palette = "Set2", #bg.labels=c("white"),
align.labels=list( c("center", "center"), c("right", "bottom")))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
pwd = askpass(), uid = 'mk255125', logmech = 'LDAP',
dtype = 'native')
# testing td_npath_sqle
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
mycon <- td_create_context(host = 'tdprd.td.teradata.com',
pwd = askpass(), uid = 'mk255125', logmech = 'LDAP',
dtype = 'native')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dplyr::first
data(mtcars)
library(dplyr)
head(mtcars)
mtcars %>% group_by(cyl) %>% mutate(top_mpg = first(mpg))
mtcars %>% group_by(cyl) %>% summarize(top_mpg = first(mpg))
mtcars %>%
group_by(cyl) %>%
summarize(top_mpg = first(mpg))
mtcars %>%
arrange(cyl) %>%
group_by(cyl) %>%
summarize(top_mpg = first(mpg))
mtcars %>%
arrange(cyl) %>%
group_by(cyl) %>%
mutate(top_mpg = first(mpg))
mtcars %>%
arrange(mpg) %>%
group_by(cyl) %>%
mutate(top_mpg = first(mpg))
mtcars %>%
arrange(mpg, desc) %>%
group_by(cyl) %>%
mutate(top_mpg = first(mpg))
mtcars %>%
arrange(desc(mpg)) %>%
group_by(cyl) %>%
mutate(top_mpg = first(mpg))
mtcars %>%
arrange(cyl, desc(mpg))
runApp()
runApp()
runApp()
runApp()
library(lubridate)
mydate <- lubridate::as_date("21-12-2018")
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%y')
mydate
month(mydate)
day(mydate)
year(mydate)
mydate + years(5)
mydate <- lubridate::as_date("21122018", format = '%d-%m-%y')
mydate + years(5)
year(mydate)
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%y')
year(mydate)
year(mydate)
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%yy')
year(mydate)
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%yyyy')
year(mydate)
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%yyyy')
year(mydate)
mydate <- lubridate::as_date("21-12-2018", format = '%d-%m-%y')
?lubridate::as_date
mydate <- lubridate::ymd("18-12-21")
mydate <- lubridate::ymd("18-12-21")
year(mydate)
year(mydate)
mydate + years(5)
year(mydate + years(5))
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(teradatasql)
library(tdplyr)
library(dplyr)
library(dbplyr)
mycon <- td_create_context(db.con <- td_create_context(
host="tdprd.td.teradata.com", uid='MK255125', pwd=askpass(),
dType = "native", logmech = "LDAP")
)
library(askpass)
mycon <- td_create_context(db.con <- td_create_context(
host="tdprd.td.teradata.com", uid='MK255125', pwd=askpass(),
dType = "native", logmech = "LDAP")
)
mycon <- td_create_context(host="tdprd.td.teradata.com", uid='MK255125', pwd=askpass(),
dType = "native", logmech = "LDAP")
random_tbl <- tbl(con, in_schema("fis_med_claims_dev", "data_for_pathing_tbl_perm_default"))
head(random_tbl)
table(random_tbl$Claim.Administrator.Claim.Number)
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>%
slice_head(n = 15)
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>%
slice_min(n = 15)
random_tbl %>%
select(Claim.Administrator.Claim.Number)
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>%
distinct()
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>%
distinct(Claim.Administrator.Claim.Number)
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>% dplyr::distinct_all()
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>% dplyr::distinct_()
random_tbl %>%
select(Claim.Administrator.Claim.Number) %>% dplyr::distinct()
claim_num <- random_tbl %>%
select(Claim.Administrator.Claim.Number)
claim_num
unique(claim_num)
head(random_tbl)
my_query <- "SELECT DISTINCT diagnosis_count FROM random_tbl"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT diagnosis_count FROM fis_med_claims_dev.data_for_pathing_tbl_perm_default"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT diagnosis_count FROM fis_med_claims_dev.data_for_pathing_tbl_perm_default"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT diagnosis_count FROM fis_med_claims_dev.data_for_pathing_tbl_perm_default"
DBI::dbExecute(mycon, my_query)
runApp()
runApp()
td_remove_context()
library(teradatasql)
library(tdplyr)
library(dplyr)
library(dbplyr)
library(askpass)
mycon <- td_create_context(host="tdprd.td.teradata.com",
uid='MK255125',
pwd=askpass(),
dType = "native",
logmech = "LDAP")
library(teradatasql)
library(tdplyr)
library(dplyr)
library(dbplyr)
library(askpass)
mycon <- td_create_context(host="tdprd.td.teradata.com",
uid='MK255125',
pwd=askpass(),
dType = "native",
logmech = "LDAP")
runApp()
shiny::runApp()
runApp()
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
merge_transition_outliers
my_query <- "SELECT DISTINCT case_id_z, dummy FROM
(SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm)"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT case_id_z, dummy FROM
(SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm);"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT case_id_z, dummy FROM (SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm);"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT case_id_z, dummy FROM (SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm)"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT case_id_z, dummy FROM SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm"
DBI::dbExecute(mycon, my_query)
my_query <- "SELECT DISTINCT case_id_z, dummy
FROM (SELECT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm)"
my_query
my_query <- "SELECT DISTINCT case_id_z, dummy
FROM (SELECT case_id_z, 1.0 AS dummy
FROM fis_med_claims_dev.transition_outliers_perm) q01;"
my_query
DBI::dbExecute(mycon, my_query)
my_query <- "CREATE TABLE tr_outliers as SELECT DISTINCT case_id_z, dummy
FROM (SELECT case_id_z, 1.0 AS dummy
FROM fis_med_claims_dev.transition_outliers_perm) q01;"
my_query
DBI::dbExecute(mycon, my_query)
my_query <- "CREATE TABLE tr_outliers AS (SELECT DISTINCT case_id_z, dummy
FROM (SELECT case_id_z, 1.0 AS dummy
FROM fis_med_claims_dev.transition_outliers_perm)) q01;"
my_query
DBI::dbExecute(mycon, my_query)
my_query <- "CREATE TABLE tr_outliers AS (SELECT DISTINCT case_id_z, dummy
FROM (SELECT case_id_z, 1.0 AS dummy
FROM fis_med_claims_dev.transition_outliers_perm) q01) q02;"
my_query
DBI::dbExecute(mycon, my_query)
library(teradatasql)
library(tdplyr)
library(dbplyr)
library(dplyr)
library(askpass)
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
td_remove_context()
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
runApp()
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
mycon
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
mycon <- td_create_context(
host="tdprd.td.teradata.com", uid="MK255125", pwd=askpass(),
dType = "native", logmech = "LDAP")
mycon
merge_transition_outliers <- tbl(con, in_schema("fis_med_claims_dev", "transition_outliers_perm"))
runApp()
my_query <- "SELECT DISTINCT case_id_z, 1.0 AS dummy FROM fis_med_claims_dev.transition_outliers_perm;"
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
data(mtcars)
mtcars %>%
group_by(gear, am, gear)
runApp()
if(!require(tdplyr)) {install.packages('tdplyr', dependencies = TRUE); require(tdplyr)}
